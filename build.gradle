plugins {
    id "com.github.davidmc24.gradle.plugin.avro" version "1.2.0"
    id "org.embulk.embulk-plugins" version "0.5.5"
    id "java"
    id "maven-publish"
    id "signing"
    id "checkstyle"
}

repositories {
    mavenCentral()

    maven {
        url "http://packages.confluent.io/maven/"
    }
}

group = "io.github.joker1007"
version = "0.2.0"
description = "Embulk input plugin for Apache Kafka"

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compileOnly "org.embulk:embulk-spi:0.11"

    implementation "org.embulk:embulk-util-timestamp:0.2.2"

    implementation("org.embulk:embulk-util-config:0.3.4") {
        exclude group: "com.fasterxml.jackson.core", module: "jackson-annotations"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
        exclude group: "com.fasterxml.jackson.datatype", module: "jackson-datatype-jdk8"
        exclude group: "javax.validation", module: "validation-api"
    }

    implementation "com.fasterxml.jackson.core:jackson-annotations:2.6.7"
    implementation "com.fasterxml.jackson.core:jackson-core:2.6.7"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.6.7"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.6.7"

    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.6.7") {
        exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-annotations"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
    }
    implementation("org.apache.kafka:kafka-clients:2.8.1") {
        exclude group: "org.slf4j", module: "slf4j-api"
    }
    implementation("org.apache.avro:avro:1.10.1") {
        exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-annotations"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
        exclude group: "org.slf4j", module: "slf4j-api"
    }
    implementation("io.confluent:kafka-avro-serializer:6.2.1") {
        exclude group: "org.apache.kafka", module: "kafka-clients"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-annotations"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
        exclude group: "org.slf4j", module: "slf4j-api"
    }


    testImplementation "junit:junit:4.+"
    testImplementation "org.embulk:embulk-spi:0.11"
    testImplementation "org.embulk:embulk-core:0.11.0"
    testImplementation "org.embulk:embulk-junit4:0.11.0"
    testImplementation "org.embulk:embulk-output-file:0.11.0"
    testImplementation "org.embulk:embulk-formatter-csv:0.11.0"
    testImplementation "org.embulk:embulk-deps:0.11.0"
    testImplementation "org.assertj:assertj-core:3.24.+"

    testImplementation "com.salesforce.kafka.test:kafka-junit4:3.+"
    testImplementation "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.6.7"
    testImplementation "com.fasterxml.jackson.module:jackson-module-paranamer:2.6.7"
    testImplementation("org.apache.kafka:kafka_2.12:2.8.+") {
        exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-annotations"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
        exclude group: "com.fasterxml.jackson.dataformat", module: "jackson-dataformat-csv"
        exclude group: "com.fasterxml.jackson.datatype", module: "jackson-datatype-jdk8"
        exclude group: "com.fasterxml.jackson.module", module: "jackson-module-scala_2.12"
        exclude group: "com.fasterxml.jackson.module", module: "jackson-module-paranamer"
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

jar {
    from rootProject.file("LICENSE.txt")
}

javadocJar {
    from rootProject.file("LICENSE.txt")
}

sourcesJar {
    from rootProject.file("LICENSE.txt")
}

embulkPlugin {
    mainClass = "org.embulk.input.kafka.KafkaInputPlugin"
    category = "input"
    type = "kafka"
}

test {
    minHeapSize = "512m"
    maxHeapSize = "6g"
}

avro {
    createOptionalGetters = true
}

checkstyle {
    configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    toolVersion = '6.14.1'
}
checkstyleMain {
    configFile = file("${project.rootDir}/config/checkstyle/default.xml")
    ignoreFailures = true
}
checkstyleTest {
    configFile = file("${project.rootDir}/config/checkstyle/default.xml")
    ignoreFailures = true
}
task checkstyle(type: Checkstyle) {
    classpath = sourceSets.main.output + sourceSets.test.output
    source = sourceSets.main.allJava + sourceSets.test.allJava
}

task "package"(dependsOn: ["gemspec", "classpath"]) {
    doLast {
        println "> Build succeeded."
        println "> You can run embulk with '-L ${file(".").absolutePath}' argument."
    }
}

gem {
    from("LICENSE.txt")
    authors = [ "joker1007" ]
    email = [ "kakyoin.hierophant@gmail.com" ]
    description = "Kafka input plugin for Embulk"
    summary = "Kafka input plugin for Embulk"
    homepage = "https://github.com/joker1007/embulk-input-kafka"
    licenses = [ "MIT" ]
}

gemPush {
    host = "https://rubygems.org"
}

task generateEmbulkProperties {
    doLast {
        mkdir ".embulk"
        def f = file(".embulk/embulk.properties")
        f.write("m2_repo=${System.properties["user.home"]}/.m2/repository\nplugins.input.kafka=maven:${project.group}:kafka:${project.version}")
    }
}

publishing {
    publications {
        embulkPluginMaven(MavenPublication) {  // Publish it with "publishEmbulkPluginMavenPublicationToMavenRepository".
            from components.java  // Must be "components.java". The dependency modification works only for it.
            pom {
                name = "embulk-input-kafka"
                packaging = "jar"
                description = "Embulk input plugin for Apache Kafka"
                url = "https://github.com/joker1007/embulk-input-kafka"

                licenses {
                    license {
                        // http://central.sonatype.org/pages/requirements.html#license-information
                        name = "MIT License"
                        url = "https://opensource.org/licenses/MIT"
                    }
                }

                scm {
                    connection = "scm:git://github.com/joker1007/embulk-input-kafka.git"
                    developerConnection = "scm:git@github.com:joker1007/embulk-input-kafka.git"
                    url = "https://github.com/joker1007/embulk-input-kafka"
                }

                developers {
                    developer {
                        id = "joker1007"
                        name = "Tomohiro Hashidate"
                        email = "kakyoin.hierophant@gmail.com"
                    }
                }
            }
        }
    }
    repositories {
        maven {  // publishMavenPublicationToMavenCentralRepository
            name = "mavenCentral"
            if (project.version.endsWith("-SNAPSHOT")) {
                url "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            } else {
                url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            }

            credentials {
                username = project.hasProperty("ossrhUsername") ? ossrhUsername : ""
                password = project.hasProperty("ossrhPassword") ? ossrhPassword : ""
            }
        }
    }
}

signing {
    useGpgCmd()
    sign publishing.publications.embulkPluginMaven
}

tasks.withType(Sign) {
    onlyIf { System.getenv().get("SKIP_SIGNING") == null }
}

tasks.withType(GenerateMavenPom) {
    doLast {
        def f = file("${buildDir.name}/publications/embulkPluginMaven/pom-default.xml")
        def parser = new XmlParser()
        def xml = parser.parse(f)
        def repos = "<repositories>\n" +
                "  <repository>\n" +
                "    <id>confluent</id>\n" +
                "    <url>https://packages.confluent.io/maven/</url>\n" +
                "  </repository>\n" +
                "</repositories>\n"
        def reposNode = parser.parseText(repos)
        xml.append(reposNode)
        f.write(groovy.xml.XmlUtil.serialize(xml))
    }
}
